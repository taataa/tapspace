.affine-element {
  display: block;
  /* Ensure zero margin and zero padding */
  margin: 0;
  padding: 0;
  /* Ensure that user-defined padding does not affect size. */
  box-sizing: border-box;
  /* Space elements are positioned by using transform matrices.
    To make this work, the elements must be positioned absolutely
    at the top-left corner of the parent.
    Only absolutely positioned elements can be transformed. */
  position: absolute;
  top: 0;
  left: 0;
  bottom: auto;
  right: auto;
  transform-origin: 0 0;
  transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  /* Span the same 3D space all over the affine elements. */
  transform-style: preserve-3d;
}
.affine-viewport {
  /* Space elements are absolutely positioned and therefore
    the view must be either absolutely or relatively positioned. */
  position: relative;
  /* Viewport is a camera that looks to the space, thus crop */
  overflow: hidden;
  /* Mobile browsers have touch actions that cancel our gestures */
  touch-action: none;
  /* Default 3D perspective */
  perspective: 300px;
}
.affine-layer,
.affine-group,
.affine-plane {
  /* Planes themselves have zero size to allow pointer events reach
    elements on the layers below. To make elements on the plane visible,
    they must be visible over the plane borders. */
  width: 0;
  height: 0;
  overflow: visible;
  /* Span the same 3D space all over the affine elements. */
  transform-style: preserve-3d;
}

.affine-controls {
  /* Controls must be visible on top of layers but their container
     must not have size so that the container area does not steal
     input events from space. */
  position: absolute;
  top: 0;
  left: 0;
  width: 0;
  height: 0;
  overflow: visible;
}

.affine-space {
  /* The space contains the layers and is a child of viewport.
     It must fill the viewport behind controls. */
  width: 100%;
  height: 100%;
  /* Span the same 3D space all over the affine elements. */
  transform-style: preserve-3d;
}
